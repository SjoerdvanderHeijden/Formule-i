# Problem Set 11
# Name: Sjoerd van der Heijden
# 10336001
# Time: 5:00
#
# Graph optimization
# Finding shortest paths through MIT buildings
#

import string
from graph import *
import copy
#
# Problem 2: Building up the Campus Map
#

def loadMap(mapFilename):
    """ 
    Parses the map file and constructs a directed graph

    Parameters: 
        mapFilename : name of the map file

    Assumes:
        Each entry in the map file consists of the following four positive 
        integers, separated by a blank space:
            From To TotalDistance DistanceOutdoors
        e.g.
            32 76 54 23
        This entry would become an edge from 32 to 76.

    Returns:
        a directed graph representing the map
    """

    print "Loading map from file..."

    mapfile = open(mapFilename)
    
    graph = WeightedGraph()
    
    for line in mapfile:
        src, dest, dist, distout = line.split()
        # Nodes are generated for use in the next step
        srcnode = Node(src)
        destnode = Node(dest)
        # Nodes and edges are always considered instances and never denoted
        # string names or numbers (except when __str__ is called)
        graph.addNode(srcnode)
        graph.addNode(destnode)
        graph.addEdge(WeightEdge(srcnode, destnode, int(dist), int(distout)))
        
    return graph

graph = loadMap('mit_map.txt')
print graph
#
# Problem 3: Finding the Shortest Path using Brute Force Search
#
# State the optimization problem as a function to minimize
# and the constraints
#

def bruteForceSearch(digraph, start, end, maxDist, maxDistOut):    
    """
    Finds the shortest path from start to end using brute-force approach.
    The total distance travelled on the path must not exceed maxTotalDist, and
    the distance spent outdoor on this path must not exceed maxDisOutdoors.

    Parameters: 
        digraph: instance of class Digraph or its subclass
        start, end: start & end building numbers (strings)
        maxTotalDist : maximum total distance on a path (integer)
        maxDistOutdoors: maximum distance spent outdoors on a path (integer)

    Assumes:
        start and end are numbers for existing buildings in graph

    Returns:
        The shortest-path from start to end, represented by 
        a list of building numbers (in strings), [n_1, n_2, ..., n_k], 
        where there exists an edge from n_i to n_(i+1) in digraph, 
        for all 1 <= i < k.

        If there exists no path that satisfies maxTotalDist and
        maxDistOutdoors constraints, then raises a ValueError.
    """ 

    if start == end:
        raise ValueError('You are already there ya dingus')
        
    pathArray = []  # A global variable for saving data from the recursion.
    
    # This function calls itself, searching each and every possible path from
    # 'start' to 'end' and returns them all in a large array.
    def picknext(currentNode = Node(start), totDist = 0, totDistOut = 0, path \
        = [Node(start)], maxDist = maxDist, maxDistOut = maxDistOut, graph = \
        digraph):
            
        for child in graph.childrenOf(currentNode):
            # The same Node cannot be visited twice
            if child[0] in path:
                continue
            
            # If the path would be too long, the path is not altered instead.
            totDist += child[1]
            totDistOut += child[2]
            if totDist > maxDist or totDistOut > maxDistOut:
                totDist -= child[1]
                totDistOut -= child[2]                
                continue
            # From here on the path is altered.
            path.append(child[0])
            
            if child[0] == Node(end):
                # If the end is reached, path properties are saved to a global.
                # array.
                pathArray.append([copy.copy(path), totDist, totDistOut])
                # The variables are restored for use in the next iteration.
                totDist -= child[1]
                totDistOut -= child[2]
                path.remove(child[0])
                continue
            # The next level of recursion is entered in which the children
            # of the current Node are evaluated.
            picknext(child[0], totDist, totDistOut, path)
            # The variables are restored for use in the next iteration.
            path.remove(child[0])
            totDist -= child[1]
            totDistOut -= child[2]            
        
        return pathArray
    
    pathArray = picknext()

    if pathArray == []:
        raise ValueError('No path found')
    # Here finally the best path is determined    
    bestDist = pathArray[0][1]
    bestPath = pathArray[0][0]
    for path in pathArray:
        if path[1] < bestDist:
            bestDist = path[1]
            bestPath = path[0]
    return bestPath

print bruteForceSearch(loadMap('mit_map.txt'), '31','56', 500, 100)

#
# Problem 4: Finding the Shorest Path using Optimized Search Method
#
def directedDFS(digraph, start, end, maxDist, maxDistOut):
    """
    Finds the shortest path from start to end using directed depth-first.
    search approach. The total distance travelled on the path must not
    exceed maxTotalDist, and the distance spent outdoor on this path must
	not exceed maxDisOutdoors.

    Parameters: 
        digraph: instance of class Digraph or its subclass
        start, end: start & end building numbers (strings)
        maxTotalDist : maximum total distance on a path (integer)
        maxDistOutdoors: maximum distance spent outdoors on a path (integer)

    Assumes:
        start and end are numbers for existing buildings in graph

    Returns:
        The shortest-path from start to end, represented by 
        a list of building numbers (in strings), [n_1, n_2, ..., n_k], 
        where there exists an edge from n_i to n_(i+1) in digraph, 
        for all 1 <= i < k.

        If there exists no path that satisfies maxTotalDist and
        maxDistOutdoors constraints, then raises a ValueError.
    """
    
    if start == end:
        raise ValueError('You are already there ya dingus')
        
    # Global variables to save information from the recursion. They have very 
    # clear names to avoid any confusion commonly associated with global vars.
    global globBestDist
    global globBestPath
    globBestDist = maxDist
    globBestPath = []

    # This function calls itself, searching each and every possible
    # path from 'start' to 'end' and returns only the shortest found.
    def picknext(currentNode = Node(start), totDist = 0, totDistOut = 0, path \
        = [Node(start)], maxDistOut = maxDistOut, graph = digraph):
        
        for child in graph.childrenOf(currentNode):
            
            global globBestDist
            global globBestPath
            
            if child[0] in path:
                continue
            
            # If the path would be too long, or longer than the current
            # shortest path, the path is not altered instead.
            totDist += child[1]
            totDistOut += child[2]
            if totDist > globBestDist or totDistOut > maxDistOut:
                totDist -= child[1]
                totDistOut -= child[2]
                continue
            # From here on the path is altered.
            path.append(child[0])
            
            if child[0] == Node(end):
                
                # If this statement is reached, 'totDist' is smaller than
                # 'globBestDist' by definition, thus better.
                globBestDist = totDist
                globBestPath = copy.copy(path)
                # The variables are restored for use in the next iteration.
                totDist -= child[1]
                totDistOut -= child[2]
                path.remove(child[0])
                continue
            

            picknext(child[0], totDist, totDistOut, path)
            # The variables are restored for use in the next iteration.
            path.remove(child[0])
            totDist -= child[1]
            totDistOut -= child[2]            
        

        return globBestPath
        
    bestPath = picknext()
    
    if bestPath == []:
        raise ValueError('No path found')
        
    return bestPath

print directedDFS(loadMap('mit_map.txt'), '31','56', 500, 100)


## Uncomment below when ready to test
#if __name__ == '__main__':
#    # Test cases
#    digraph = loadMap("mit_map.txt")
#
#    LARGE_DIST = 1000000
#
#    # Test case 1
#    print "---------------"
#    print "Test case 1:"
#    print "Find the shortest-path from Building 32 to 56"
#    expectedPath1 = ['32', '56']
#    brutePath1 = bruteForceSearch(digraph, '32', '56', LARGE_DIST, LARGE_DIST)
#    dfsPath1 = directedDFS(digraph, '32', '56', LARGE_DIST, LARGE_DIST)
#    print "Expected: ", expectedPath1
#    print "Brute-force: ", brutePath1
#    print "DFS: ", dfsPath1
#
#    # Test case 2
#    print "---------------"
#    print "Test case 2:"
#    print "Find the shortest-path from Building 32 to 56 without going outdoors"
#    expectedPath2 = ['32', '36', '26', '16', '56']
#    brutePath2 = bruteForceSearch(digraph, '32', '56', LARGE_DIST, 0)
#    dfsPath2 = directedDFS(digraph, '32', '56', LARGE_DIST, 0)
#    print "Expected: ", expectedPath2
#    print "Brute-force: ", brutePath2
#    print "DFS: ", dfsPath2
#
#    # Test case 3
#    print "---------------"
#    print "Test case 3:"
#    print "Find the shortest-path from Building 2 to 9"
#    expectedPath3 = ['2', '3', '7', '9']
#    brutePath3 = bruteForceSearch(digraph, '2', '9', LARGE_DIST, LARGE_DIST)
#    dfsPath3 = directedDFS(digraph, '2', '9', LARGE_DIST, LARGE_DIST)
#    print "Expected: ", expectedPath3
#    print "Brute-force: ", brutePath3
#    print "DFS: ", dfsPath3
#
#    # Test case 4
#    print "---------------"
#    print "Test case 4:"
#    print "Find the shortest-path from Building 2 to 9 without going outdoors"
#    expectedPath4 = ['2', '4', '10', '13', '9']
#    brutePath4 = bruteForceSearch(digraph, '2', '9', LARGE_DIST, 0)
#    dfsPath4 = directedDFS(digraph, '2', '9', LARGE_DIST, 0)
#    print "Expected: ", expectedPath4
#    print "Brute-force: ", brutePath4
#    print "DFS: ", dfsPath4
#
#    # Test case 5
#    print "---------------"
#    print "Test case 5:"
#    print "Find the shortest-path from Building 1 to 32"
#    expectedPath5 = ['1', '4', '12', '32']
#    brutePath5 = bruteForceSearch(digraph, '1', '32', LARGE_DIST, LARGE_DIST)
#    dfsPath5 = directedDFS(digraph, '1', '32', LARGE_DIST, LARGE_DIST)
#    print "Expected: ", expectedPath5
#    print "Brute-force: ", brutePath5
#    print "DFS: ", dfsPath5
#
#    # Test case 6
#    print "---------------"
#    print "Test case 6:"
#    print "Find the shortest-path from Building 1 to 32 without going outdoors"
#    expectedPath6 = ['1', '3', '10', '4', '12', '24', '34', '36', '32']
#    brutePath6 = bruteForceSearch(digraph, '1', '32', LARGE_DIST, 0)
#    dfsPath6 = directedDFS(digraph, '1', '32', LARGE_DIST, 0)
#    print "Expected: ", expectedPath6
#    print "Brute-force: ", brutePath6
#    print "DFS: ", dfsPath6
#
#    # Test case 7
#    print "---------------"
#    print "Test case 7:"
#    print "Find the shortest-path from Building 8 to 50 without going outdoors"
#    bruteRaisedErr = 'No'
#    dfsRaisedErr = 'No'
#    try:
#        bruteForceSearch(digraph, '8', '50', LARGE_DIST, 0)
#    except ValueError:
#        bruteRaisedErr = 'Yes'
#    
#    try:
#        directedDFS(digraph, '8', '50', LARGE_DIST, 0)
#    except ValueError:
#        dfsRaisedErr = 'Yes'
#    
#    print "Expected: No such path! Should throw a value error."
#    print "Did brute force search raise an error?", bruteRaisedErr
#    print "Did DFS search raise an error?", dfsRaisedErr
#
#    # Test case 8
#    print "---------------"
#    print "Test case 8:"
#    print "Find the shortest-path from Building 10 to 32 without walking"
#    print "more than 100 meters in total"
#    bruteRaisedErr = 'No'
#    dfsRaisedErr = 'No'
#    try:
#        bruteForceSearch(digraph, '10', '32', 100, LARGE_DIST)
#    except ValueError:
#        bruteRaisedErr = 'Yes'
#    
#    try:
#        directedDFS(digraph, '10', '32', 100, LARGE_DIST)
#    except ValueError:
#        dfsRaisedErr = 'Yes'
#    
#    print "Expected: No such path! Should throw a value error."
#    print "Did brute force search raise an error?", bruteRaisedErr
#    print "Did DFS search raise an error?", dfsRaisedErr

